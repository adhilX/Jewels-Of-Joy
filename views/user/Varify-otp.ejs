<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ShutterCart - OTP Verification</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <!-- SweetAlert2 CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

<!-- SweetAlert2 JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Inter', sans-serif;
    }

    body {
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: #f5f5f5;
    }

    .container {
      background-color: white;
      padding: 2.5rem;
      border-radius: 1rem;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1),
                  0 5px 15px rgba(0, 0, 0, 0.05);
      width: 90%;
      max-width: 480px;
      text-align: center;
    }

    .container:hover {
      box-shadow: 0 25px 45px rgba(0, 0, 0, 0.12),
                  0 8px 20px rgba(0, 0, 0, 0.08);
      transform: translateY(-2px);
      transition: all 0.3s ease;
    }

    .logo {
      font-size: 1.5rem;
      font-weight: 600;
      color: #333;
      margin-bottom: 2rem;
    }

    .title {
      font-size: 1.125rem;
      color: #374151;
      margin-bottom: 0.5rem;
      font-weight: 500;
    }

    .subtitle {
      font-size: 0.875rem;
      color: #6b7280;
      margin-bottom: 2rem;
    }

    .otp-container {
      display: flex;
      gap: 0.75rem;
      justify-content: center;
      margin-bottom: 1.5rem;
    }

    .otp-input {
      width: 3.5rem;
      height: 3.5rem;
      border: 1.5px solid #ddd;
      border-radius: 0.75rem;
      text-align: center;
      font-size: 1.5rem;
      font-weight: 500;
      color: #333;
      transition: all 0.3s ease;
      background-color: #fff;
    }

    .otp-input:focus {
      outline: none;
      border-color: #4B5563;
      box-shadow: 0 0 0 3px rgba(75, 85, 99, 0.1);
    }

    .verify-btn {
      width: 100%;
      padding: 1rem;
      background-color: #292f38;
      color: white;
      border: none;
      border-radius: 0.5rem;
      font-size: 1rem;
      font-weight: 500;
      cursor: pointer;
      transition: background-color 0.3s ease;
      margin: 1.5rem 0;
    }

    .verify-btn:hover {
      background-color: #404b5c;
    }

    .timer {
      font-size: 2rem;
      font-weight: 500;
      color: #4f5d73;
      background: #f3f4f6;
      width: 100px;
      height: 100px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 2rem auto;
    }

    .resend {
      text-align: center;
      font-size: 0.875rem;
      color: #666;
    }

    .resend-text {
      display: block;
      margin-bottom: 0.5rem;
      color: #6b7280;
    }

    .resend a {
      color: #6b7280;
      text-decoration: none;
      font-weight: 400;
    }

    .resend a.disabled {
      color: #9ca3af;
      pointer-events: none;
    }

    .error-message {
      color: #dc3545;
      font-size: 0.875rem;
      margin-top: 0.5rem;
      display: none;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="logo">ShutterCart</div>
    <h2 class="title">Enter the OTP which we sent</h2>
    <p class="subtitle">to your mail</p>
    
    <form id="otpForm">
      <div class="otp-container">
        <input type="text" name="otp1" class="otp-input" maxlength="1" autofocus>
        <input type="text" name="otp2" class="otp-input" maxlength="1">
        <input type="text" name="otp3" class="otp-input" maxlength="1">
        <input type="text" name="otp4" class="otp-input" maxlength="1">
        <input type="text" name="otp5" class="otp-input" maxlength="1">
        <input type="text" name="otp6" class="otp-input" maxlength="1">
      </div>
      <div class="error-message" id="errorMessage"></div>
      <div class="timer" id="timer">02:00</div>
      <button type="submit" class="verify-btn">Verify</button>
    </form>

    <div class="resend">
      <span class="resend-text">Didn't receive the code?</span>
      <a href="#" id="resendBtn" class="disabled">Resend</a>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const inputs = document.querySelectorAll('.otp-input');
      const form = document.getElementById('otpForm');
      const errorMessage = document.getElementById('errorMessage');
      const resendBtn = document.getElementById('resendBtn');
      const timerElement = document.getElementById('timer');
      
      let timerSeconds = 120;
      let timerInterval;

      function formatTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
      }

      function startTimer() {
        resendBtn.classList.add('disabled');
        timerElement.textContent = formatTime(timerSeconds);
        
        timerInterval = setInterval(() => {
          timerSeconds--;
          if (timerSeconds < 0) {
            clearInterval(timerInterval);
            resendBtn.classList.remove('disabled');
            timerElement.textContent = '00:00';
            return;
          }
          timerElement.textContent = formatTime(timerSeconds);
        }, 1000);
      }

      // Start timer on page load
      startTimer();

      // Handle input of OTP
      inputs.forEach((input, index) => {
        input.addEventListener('input', function(e) {
          // Allow only numbers
          this.value = this.value.replace(/[^0-9]/g, '');
          
          if (this.value.length === 1) {
            if (index < inputs.length - 1) {
              inputs[index + 1].focus();
            }
          }
        });

        input.addEventListener('keydown', function(e) {
          if (e.key === 'Backspace' && !this.value) {
            if (index > 0) {
              inputs[index - 1].focus();
            }
          }
        });
      });

      // Handle form submission
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = {
          otp1: inputs[0].value,
          otp2: inputs[1].value,
          otp3: inputs[2].value,
          otp4: inputs[3].value,
          otp5: inputs[4].value,
          otp6: inputs[5].value
        };

        if (Object.values(formData).some(value => !value)) {
          errorMessage.style.display = 'block';
          errorMessage.textContent = 'Please enter a valid 6-digit OTP';
          return;
        }

        try {
          const response = await fetch('/verify-otp', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
          });

          const data = await response.json();

          if (!response.ok) {
            throw new Error(data.message || 'Failed to verify OTP');
          }

          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Success!',
              text: data.message || 'OTP verified successfully',
              showConfirmButton: false,
              timer: 1500,
              style: {
                color: 'green',
                background: 'white',
              },
            });
            window.location.href = data.redirectUrl || '/';
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: data.message || 'Invalid OTP. Please try again.',
              showConfirmButton: false,
              timer: 1500,
              style: {
                color: 'red',
                background: 'white',
              },
            });
            
            // Clear inputs on error
            inputs.forEach(input => input.value = '');
            inputs[0].focus();
          }
        } catch (error) {
          console.error('Error:', error);
          errorMessage.style.display = 'block';
          errorMessage.textContent = error.message || 'Failed to verify OTP. Please try again.';
        }
      });

      // Handle resend OTP
      resendBtn.addEventListener('click', async function(e) {
        e.preventDefault();
        
        if (resendBtn.classList.contains('disabled')) {
          return;
        }

        try {
          const response = await fetch('/resend-otp', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });

          const data = await response.json();

          if (!response.ok) {
            throw new Error(data.message || 'Failed to resend OTP');
          }

          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Success!',
              text: data.message || 'OTP resent successfully',
              showConfirmButton: false,
              timer: 1500,
              style: {
                color: 'green',
                background: 'white',
              },
            });
            // Reset timer
            clearInterval(timerInterval);
            timerSeconds = 120;
            startTimer();
            
            // Clear inputs
            inputs.forEach(input => input.value = '');
            inputs[0].focus();
            
            // Clear error message
            errorMessage.style.display = 'none';
          }
        } catch (error) {
          console.error('Error:', error);
          errorMessage.style.display = 'block';
          errorMessage.textContent = error.message || 'Failed to resend OTP. Please try again.';
        }
      });
    });
  </script>
</body>
</html>