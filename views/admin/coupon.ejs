<%- include("../partials/admin/header") %>
<style>

</style>

<div class="dashboard-container">
    <div class="content-header">
        <h1 class="content-title">Coupon Management</h1>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <div class="form-card">
                        <form id="couponForm">
                            <div class="form-group">
                                <label for="coupon-name" class="form-label">
                                    <i class="material-icons md-label"></i>
                                    Coupon Name
                                </label>
                                <input
                                    type="text"
                                    id="coupon-name"
                                    name="couponName"
                                    placeholder="Enter coupon name"
                                    class="form-control"
                                />
                                <div id="error-coupon-name" class="error-message"></div>
                            </div>

                            <div class="form-group">
                                <label for="startingDate" class="form-label">
                                    <i class="material-icons md-calendar_today"></i>
                                    Start Date
                                </label>
                                <input
                                    type="date"
                                    name="startDate"
                                    placeholder="Enter start date"
                                    class="form-control"
                                    required="true"
                                    id="startingDate"
                                />
                                <div id="error-start-date" class="error-message"></div>
                            </div>

                            <div class="form-group">
                                <label for="expiringDate" class="form-label">
                                    <i class="material-icons md-event"></i>
                                    End Date
                                </label>
                                <input
                                    type="date"
                                    name="endDate"
                                    class="form-control"
                                    id="expiringDate"
                                    required="true"
                                />
                                <div id="error-end-date" class="error-message"></div>
                            </div>

                            <div class="form-group">
                                <label for="offer-price" class="form-label">
                                    <i class="material-icons md-local_offer"></i>
                                    Offer Price
                                </label>
                                <input
                                    type="text"
                                    name="offerPrice"
                                    placeholder="Enter offer price"
                                    class="form-control"
                                />
                                <div id="error-offer-price" class="error-message"></div>
                            </div>

                            <div class="form-group">
                                <label for="minimum-price" class="form-label">
                                    <i class="material-icons md-money"></i>
                                    Minimum Price
                                </label>
                                <input
                                    type="text"
                                    name="minimumPrice"
                                    placeholder="Enter minimum price"
                                    class="form-control"
                                />
                                <div id="error-minimum-price" class="error-message"></div>
                            </div>

                            <button class="btn btn-create" type="button" onclick="submitForm()">
                                <i class="material-icons md-add_circle"></i>
                                Add Coupon
                            </button>
                            <div id="err-msg" class="error-message"></div>
                        </form>
                    </div>
                </div>

                <div class="col-md-8">
                    <div class="table-container">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Created On</th>
                                    <th>Expire On</th>
                                    <th>Offer Price</th>
                                    <th>Minimum Price</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                    <th>Edit</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% coupons.forEach(coupon=>{ %>
                                <tr data-coupon-id="<%=coupon._id%>">
                                    <td><%=coupon.name%></td>
                                    <td>
                                        <%= new Date(coupon.createdOn).toLocaleDateString("en-US") || "Invalid Date" %>
                                    </td>
                                    <td>
                                        <%= new Date(coupon.expireOn).toLocaleDateString("en-US") || "Invalid Date" %>
                                    </td>
                                    <td>₹<%=coupon.offerPrice%></td>
                                    <td>₹<%=coupon.minimumPrice%></td>
                                    <td>
                                        <span class="badge <%= coupon.isListed ? 'bg-success' : 'bg-danger' %>">
                                            <%= coupon.isListed ? 'Active' : 'Inactive' %>
                                        </span>
                                    </td>
                                    <td>
                                        <button 
                                            onclick="toggleCouponStatus('<%=coupon._id%>', '<%=coupon.isListed%>')"
                                            class="btn w-2 btn-action <%= coupon.isListed ? 'btn-unlist' : 'btn-list' %>"
                                        >
                                            <i class="material-icons <%= coupon.isListed ? 'md-block' : 'md-check_circle' %>"></i>
                                            <%= coupon.isListed ? 'Unlist' : 'list'%> 
                                         </button>
                                    </td>
                                    <td class="btn "> 
                                        <a href="/admin/editcoupon?id=<%=coupon._id%>" class="btn-action btn-edit" title="Edit Category">
                                            <i class="material-icons md-edit"></i>
                                        </a></td>
                                </tr>
                                <% }) %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function validateForm() {
        let isValid = true;
        let errors = [];
        
        // Clear previous error messages
        document.querySelectorAll(".error-message").forEach((element) => {
            element.innerHTML = "";
            element.style.display = "none";
        });

        // Coupon Name Validation
        let name = document.getElementsByName("couponName")[0].value.trim();
        const nameRegex = /^[A-Za-z0-9]{1,50}$/;
        
        if (!name) {
            showError("error-coupon-name", "Coupon name is required");
            errors.push("Coupon name is required");
            isValid = false;
        } else if (!nameRegex.test(name)) {
            showError("error-coupon-name", "Coupon name must be 1-50 characters long and contain only letters and numbers");
            errors.push("Invalid coupon name format");
            isValid = false;
        }

        // Date Validation
        const sDate = document.getElementsByName("startDate")[0].value;
        const eDate = document.getElementsByName("endDate")[0].value;
        
        if (!sDate) {
            showError("error-start-date", "Start date is required");
            errors.push("Start date is required");
            isValid = false;
        }
        
        if (!eDate) {
            showError("error-end-date", "End date is required");
            errors.push("End date is required");
            isValid = false;
        }

        if (sDate && eDate) {
            // Format today's date to match the input date format (YYYY-MM-DD)
            const today = new Date();
            const todayFormatted = today.toISOString().split('T')[0];

            if (sDate === eDate) {
                showError("error-end-date", "End date cannot be the same as start date");
                errors.push("Start and end dates cannot be the same");
                isValid = false;
            }

            if (sDate > eDate) {
                showError("error-end-date", "End date must be after the start date");
                errors.push("Invalid date range");
                isValid = false;
            }

            if (sDate < todayFormatted) {
                showError("error-start-date", "Start date cannot be in the past");
                errors.push("Invalid start date");
                isValid = false;
            }

            // Calculate the difference in days
            const startDate = new Date(sDate);
            const endDate = new Date(eDate);
            const diffTime = Math.abs(endDate - startDate);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            
            if (diffDays < 1) {
                showError("error-end-date", "Coupon must be valid for at least 1 day");
                errors.push("Coupon duration too short");
                isValid = false;
            }
        }

        // Price Validation
        const offerPriceInput = document.getElementsByName("offerPrice")[0];
        const minimumPriceInput = document.getElementsByName("minimumPrice")[0];
        
        if (!offerPriceInput.value.trim()) {
            showError("error-offer-price", "Offer price is required");
            errors.push("Offer price is required");
            isValid = false;
        }
        
        if (!minimumPriceInput.value.trim()) {
            showError("error-minimum-price", "Minimum price is required");
            errors.push("Minimum price is required");
            isValid = false;
        }

        if (offerPriceInput.value.trim() && minimumPriceInput.value.trim()) {
            const offerPrice = parseFloat(offerPriceInput.value);
            const minimumPrice = parseFloat(minimumPriceInput.value);

            if (isNaN(offerPrice)) {
                showError("error-offer-price", "Offer price must be a valid number");
                errors.push("Invalid offer price");
                isValid = false;
            } else if (offerPrice <= 0) {
                showError("error-offer-price", "Offer price must be greater than 0");
                errors.push("Invalid offer price");
                isValid = false;
            }

            if (isNaN(minimumPrice)) {
                showError("error-minimum-price", "Minimum price must be a valid number");
                errors.push("Invalid minimum price");
                isValid = false;
            } else if (minimumPrice <= 0) {
                showError("error-minimum-price", "Minimum price must be greater than 0");
                errors.push("Invalid minimum price");
                isValid = false;
            }

            if (!isNaN(offerPrice) && !isNaN(minimumPrice)) {
                if (offerPrice >= minimumPrice) {
                    showError("error-offer-price", "Offer price must be less than minimum price");
                    errors.push("Invalid price relationship");
                    isValid = false;
                }
            }
        }

        if (!isValid) {
            // Show all validation errors in a single SweetAlert
            Swal.fire({
                icon: 'error',
                title: 'Validation Error',
                html: errors.map(error => `<div style="color: #a3a8c3; margin: 0.5rem 0;">${error}</div>`).join(''),
                confirmButtonText: 'OK',
                customClass: {
                    popup: 'swal2-dark'
                }
            });
        }

        return isValid;
    }

    function showError(elementId, message) {
        const errorElement = document.getElementById(elementId);
        if (errorElement) {
            errorElement.innerHTML = message;
            errorElement.style.display = "block";
            errorElement.style.color = "red";
            // Add a subtle animation to draw attention
            errorElement.style.animation = "fadeIn 0.3s";
        }
    }

    async function submitForm() {
        // Clear previous error messages
        document.querySelectorAll(".error-message").forEach((el) => {
            el.innerHTML = "";
            el.style.display = "none";
        });

        // Validate form fields
        if (!validateForm()) {
            return;
        }

        // Prepare form data
        const formData = {
            couponName: document.querySelector("input[name='couponName']").value.trim(),
            startDate: document.querySelector("input[name='startDate']").value,
            endDate: document.querySelector("input[name='endDate']").value,
            offerPrice: document.querySelector("input[name='offerPrice']").value,
            minimumPrice: document.querySelector("input[name='minimumPrice']").value,
        };

        try {
            // Show loading state
            Swal.fire({
                title: 'Creating Coupon...',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            // Submit form using fetch
            const response = await fetch("/admin/createCoupon", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(formData),
            });

            const result = await response.json();

            if (response.ok) {
                await Swal.fire({
                    icon: "success",
                    title: "Success!",
                    text: result.message || "Coupon created successfully",
                    confirmButtonText: "OK",
                    customClass: {
                        popup: 'swal2-dark'
                    }
                });
                window.location.reload();
            } else {
                // Handle specific error cases
                let errorMessage = result.message || "Failed to create coupon";
                if (result.errors && Array.isArray(result.errors)) {
                    errorMessage = result.errors.join('\n');
                }
                
                Swal.fire({
                    icon: "error",
                    title: "Error!",
                    text:  errorMessage,
                    confirmButtonText: "OK",
                    customClass: {
                        popup: 'swal2-dark'
                    }
                });

                // Show field-specific errors if available
                if (result.fieldErrors) {
                    Object.keys(result.fieldErrors).forEach(field => {
                        const errorElement = document.getElementById(`error-${field}`);
                        if (errorElement) {
                            showError(`error-${field}`, result.fieldErrors[field]);
                        }
                    });
                }
            }
        } catch (error) {
            console.error("Error:", error);
            Swal.fire({
                icon: "error",
                title: "Error!",
                color: "red",
                text: error.message || "An unexpected error occurred. Please try again later.",
                confirmButtonText: "OK",
                customClass: {
                    popup: 'swal2-dark'
                }
            });
        }
    }

    // Add real-time validation
    document.querySelectorAll('input, select').forEach(element => {
        element.addEventListener('input', function() {
            const errorElement = document.getElementById(`error-${this.name}`);
            if (errorElement) {
                errorElement.style.display = 'none';
            }
        });
    });

    // Add CSS for error message animation
    const style = document.createElement('style');
    style.textContent = `
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .error-message {
            margin-top: 5px;
            font-size: 0.875rem;
            color: red;
            display: none;
        }
    `;
    document.head.appendChild(style);

    async function toggleCouponStatus(couponId, currentStatus) {
        try {
            const result = await Swal.fire({
                title: 'Are you sure?',
                text: currentStatus ? 'Do you want to deactivate this coupon?' : 'Do you want to activate this coupon?',
                icon: currentStatus ? 'warning' : 'question',
                showCancelButton: true,
                confirmButtonText: currentStatus ? 'Yes, deactivate it!' : 'Yes, activate it!',
                cancelButtonText: 'Cancel',
                customClass: {
                    popup: 'swal2-dark'
                }
            });

            if (result.isConfirmed) {
                const response = await fetch(`/admin/toggleCouponStatus/${couponId}`, {
                    method: 'PATCH'
                });

                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: currentStatus ? 'Coupon has been deactivated.' : 'Coupon has been activated.',
                            customClass: {
                                popup: 'swal2-dark'
                            }
                        });
                        location.reload();
                    } else {
                        throw new Error(data.message || 'Something went wrong');
                    }
                } else {
                    throw new Error('Failed to update coupon status');
                }
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: error.message || 'Failed to update coupon status',
                customClass: {
                    popup: 'swal2-dark'
                }
            });
        }
    }

    // Add CSS for animations
    const deleteStyle = document.createElement('style');
    deleteStyle.textContent = `
        tr {
            transition: all 0.3s ease-out;
        }
    `;
    document.head.appendChild(deleteStyle);

    function setDefaultStarDate() {
        const today = new Date();
        const year = today.getFullYear();
        let month = (today.getMonth() + 1).toString().padStart(2, "0");
        let day = today.getDate().toString().padStart(2, "0");
        document.getElementById("startingDate").value = `${year}-${month}-${day}`;
    }
</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<%- include("../partials/admin/footer") %>
