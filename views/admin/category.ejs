<%- include("../partials/admin/header") %>

<div class="dashboard-container">
    <div class="content-header">
        <h1 class="page-title">Category Management</h1>
    </div>

    <div class="row">
        <!-- Add Category Form -->
        <div class="col-md-4">
            <div class="card form-card">
                <div class="card-body">
                    <div class="form-header">
                        <div class="form-icon">
                            <i class="material-icons md-add_box"></i>
                        </div>
                        <h5 class="card-title">Add New Category</h5>
                    </div>
                    <form onsubmit="return validateAddCategoryForm(event)" id="addCategoryForm">
                        <div class="form-group">
                            <label class="form-label">
                                <i class="material-icons md-label"></i>
                                Category Name
                            </label>
                            <input 
                                type="text" 
                                name="name" 
                                placeholder="Enter category name" 
                                class="form-control" 
                                id="categoryName"
                                minlength="3"
                                maxlength="50"
                            />
                            <div class="error-message" id="nameError"></div>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">
                                <i class="material-icons md-description"></i>
                                Description
                            </label>
                            <textarea 
                                placeholder="Enter category description" 
                                name="description" 
                                class="form-control" 
                                id="description" 
                                rows="4"
                                minlength="10"
                                maxlength="500"
                            ></textarea>
                            <div class="error-message" id="descriptionError"></div>
                        </div>
                        <button class="btn btn-create w-100" type="submit">
                            <i class="material-icons md-add_circle"></i>
                            Create Category
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Categories Table -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Description</th>
                                    <th>Offer</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% cat.reverse().forEach((category) => { %>
                                <tr>
                                    <td>
                                        <span class="category-name"><%= category.name %></span>
                                    </td>
                                    <td>
                                        <span class="category-desc"><%= category.description %></span>
                                    </td>
                                    <td>
                                        <% if(category.categoryOffer > 0) { %>
                                            <span class="offer-badge">
                                                <%= category.categoryOffer %>% OFF
                                                <button class="btn-remove-offer" onclick="removeOffer('<%= category._id %>')">
                                                    <i class="material-icons md-close"></i>
                                                </button>
                                            </span>
                                        <% } else { %>
                                            <button class="btn-add-offer" onclick="addOffer('<%= category._id %>')">
                                                Add Offer
                                            </button>
                                        <% } %>
                                    </td>
                                    <td>
                                        <span class="status-badge <%= category.isListed ? 'active' : 'inactive' %>">
                                            <%= category.isListed ? 'Listed' : 'Unlisted' %>
                                        </span>
                                    </td>
                                    <td>
                                        <div class="action-buttons">
                                            <a href="/admin/editcategory?id=<%= category._id %>" class="btn-action btn-edit" title="Edit Category">
                                                <i class="material-icons md-edit"></i>
                                            </a>
                                            <% if(category.isListed) { %>
                                                <a href="/admin/listcategory?id=<%= category._id %>" class="btn-action btn-unlist" title="Unlist Category">
                                                    <i class="material-icons md-visibility_off"></i>
                                                </a>
                                            <% } else { %>
                                                <a href="/admin/unListcategory?id=<%= category._id %>" class="btn-action btn-list" title="List Category">
                                                    <i class="material-icons md-visibility"></i>
                                                </a>
                                            <% } %>
                                        </div>
                                    </td>
                                </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>

</style>

<script>
    function validateAddCategoryForm(event) {
        event.preventDefault();
        let isValid = true;
        
        // Reset error messages
        document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
        document.querySelectorAll('.form-control').forEach(el => {
            el.style.borderColor = 'rgba(255, 255, 255, 0.1)';
            el.style.boxShadow = 'none';
        });

        // Validate Category Name
        const categoryName = document.getElementById('categoryName');
        if (!categoryName.value.trim()) {
            showError('nameError', 'Category name is required');
            highlightError(categoryName);
            isValid = false;
        } else if (categoryName.value.trim().length < 3) {
            showError('nameError', 'Category name must be at least 3 characters');
            highlightError(categoryName);
            isValid = false;
        } else if (categoryName.value.trim().length > 50) {
            showError('nameError', 'Category name cannot exceed 50 characters');
            highlightError(categoryName);
            isValid = false;
        }

        // Validate Description
        const description = document.getElementById('description');
        if (!description.value.trim()) {
            showError('descriptionError', 'Description is required');
            highlightError(description);
            isValid = false;
        } else if (description.value.trim().length < 10) {
            showError('descriptionError', 'Description must be at least 10 characters');
            highlightError(description);
            isValid = false;
        } else if (description.value.trim().length > 500) {
            showError('descriptionError', 'Description cannot exceed 500 characters');
            highlightError(description);
            isValid = false;
        }

        // If valid, submit the form
        if (isValid) {
            handleFormSubmit(event);
        }

        return false;
    }

    function showError(elementId, message) {
        const errorElement = document.getElementById(elementId);
        errorElement.textContent = message;
        errorElement.style.opacity = '0';
        requestAnimationFrame(() => {
            errorElement.style.opacity = '1';
        });
    }

    function highlightError(element) {
        element.style.borderColor = '#ff4d4d';
        element.style.boxShadow = '0 0 0 2px rgba(255, 77, 77, 0.25)';
        element.focus();
    }

    // Add input event listeners for real-time validation
    document.getElementById('categoryName').addEventListener('input', function() {
        const errorElement = document.getElementById('nameError');
        this.style.borderColor = 'rgba(255, 255, 255, 0.1)';
        this.style.boxShadow = 'none';
        errorElement.textContent = '';
        
        if (this.value.trim().length > 0 && this.value.trim().length < 3) {
            showError('nameError', 'Category name must be at least 3 characters');
        } else if (this.value.trim().length > 50) {
            showError('nameError', 'Category name cannot exceed 50 characters');
        }
    });

    document.getElementById('description').addEventListener('input', function() {
        const errorElement = document.getElementById('descriptionError');
        this.style.borderColor = 'rgba(255, 255, 255, 0.1)';
        this.style.boxShadow = 'none';
        errorElement.textContent = '';
        
        if (this.value.trim().length > 0 && this.value.trim().length < 10) {
            showError('descriptionError', 'Description must be at least 10 characters');
        } else if (this.value.trim().length > 500) {
            showError('descriptionError', 'Description cannot exceed 500 characters');
        }
    });

    async function handleFormSubmit(event) {
        event.preventDefault();
        const button = document.querySelector('.btn-create');
        const originalContent = button.innerHTML;
        
        try {
            // Show loading state
            button.disabled = true;
            button.innerHTML = '<div class="spinner"></div> Creating...';

            const formData = {
                name: document.getElementById('categoryName').value.trim(),
                description: document.getElementById('description').value.trim()
            };

            const response = await fetch('/admin/addcategory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });

            const data = await response.json();

            if (response.ok) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Category has been created successfully',
                    confirmButtonColor: '#00b517',
                    background: '#1e2433',
                    color: '#fff'
                });
                location.reload();
            } else {
                throw new Error(data.message || 'Failed to create category');
            }
        } catch (error) {
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'An error occurred while creating the category',
                confirmButtonColor: '#dc3545',
                background: '#1e2433',
                color: '#fff'
            });
            
            // Restore button state
            button.disabled = false;
            button.innerHTML = originalContent;
        }
    }
</script>

<script>
    async function addOffer(categoryid){
        const {value:amount}= await Swal.fire({
            title:'Offer in percentage',
            input: 'number',
            InputLabel:'Percentage',
            inputPlaceholder:'%',
        })
         if(amount){
            try {
                const response = await fetch('/admin/addCategoryOffer',{
                    method:'POST',
                    headers:{
                        'content-type':'application/json'
                    },
                    body:JSON.stringify({
                        percentage: amount,
                        categoryid:categoryid,

                    })
                })
            const data = await response.json();
            if(response.ok){
                Swal.fire(
                    "Offer added",
                    'The offer has been added',
                    'success'
                ).then(()=>{
                    location.reload();
                })
            }else{
                Swal.fire(
                    'Failed',
                    data.message || 'Adding offer failed',
                    'error'
                )
            }
            } catch (error) {
                Swal.fire(
                    'Error',
                    'An error occured while adding the offer',
                    'error'
                );
                console.log('Error adding offer',error)
            }
        }
    }

    async function removeOffer(categoryid) {
        try {
            const response = await fetch('/admin/removeCategoryOffer',{
                method:'POST',
                headers:{
                    'content-type':'application/json'
                },
                body:JSON.stringify({
                    categoryid:categoryid,

                })
            })
            const data = await response.json()

            if(response.ok|| data.status=== true){
                Swal.fire(
                    "Offer Removed",
                    'The offer has been removed',
                    'success'
                ).then(()=>{
                    location.reload();
                })
            }else{
                Swal.fire(
                    'Failed',
                    data.message || 'removing offer failed',
                    'error'
                )
            }
        }catch(error){
            Swal.fire(
                'Error',
                'An error occured while removing the offer',
                'error'
            );
            console.log('Error removing offer',error)
        }
    }
</script>

<%- include('../partials/admin/footer') %>